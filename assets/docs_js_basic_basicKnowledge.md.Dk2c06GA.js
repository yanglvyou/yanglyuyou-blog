import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DMnOZCXF.js";const d=JSON.parse('{"title":"基础知识","description":"","frontmatter":{},"headers":[],"relativePath":"docs/js/basic/basicKnowledge.md","filePath":"docs/js/basic/basicKnowledge.md","lastUpdated":1744510590000}'),t={name:"docs/js/basic/basicKnowledge.md"};function e(h,s,k,p,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h1><h2 id="js-事件循环" tabindex="-1">JS 事件循环 <a class="header-anchor" href="#js-事件循环" aria-label="Permalink to &quot;JS 事件循环&quot;">​</a></h2><details class="details custom-block"><summary>参考回答</summary><h4 id="_1、先说核心模型-单线程与异步的底层逻辑" tabindex="-1">1、先说核心模型：单线程与异步的底层逻辑 <a class="header-anchor" href="#_1、先说核心模型-单线程与异步的底层逻辑" aria-label="Permalink to &quot;1、先说核心模型：单线程与异步的底层逻辑&quot;">​</a></h4><ul><li><strong>单线程的限制</strong>：JS 是单线程的，意味着它只有一个主线程（Main Thread）处理任务，但浏览器环境需要同时处理渲染、网络请求、用户交互等异步操作。</li><li><strong>事件循环的意义</strong>：通过「事件循环 + 任务队列」机制，在单线程下实现非阻塞的异步操作，避免页面卡顿。</li></ul><h4 id="_2-分层拆解事件循环的工作流程" tabindex="-1">2. 分层拆解事件循环的工作流程 <a class="header-anchor" href="#_2-分层拆解事件循环的工作流程" aria-label="Permalink to &quot;2. 分层拆解事件循环的工作流程&quot;">​</a></h4><ul><li><strong>同步代码执行</strong>：所有同步任务（如 console.log、函数调用）在主线程的调用栈（Call Stack）中直接执行。</li><li><strong>异步任务分类</strong><ul><li><strong>宏任务（MacroTask）</strong>：<code>setTimeout</code>、<code>setInterval</code>、DOM 事件回调、I/O 操作（如 fetch 完成后的回调）。</li><li><strong>微任务（MicroTask）</strong>：<code>Promise.then</code>、<code>MutationObserver</code>、<code>queueMicrotask</code>。</li></ul></li></ul><h4 id="_3-任务队列管理" tabindex="-1">3. 任务队列管理： <a class="header-anchor" href="#_3-任务队列管理" aria-label="Permalink to &quot;3. 任务队列管理：&quot;">​</a></h4><ul><li>遇到异步任务时，浏览器内核的对应模块（如定时器线程、网络线程）会接管异步操作，完成后将回调函数推入对应的队列。</li><li><strong>微任务队列优先级高于宏任务队列</strong>：每次主线程清空（调用栈为空）后，会先依次执行所有微任务，再取出一个宏任务执行，如此循环。</li></ul><h4 id="_4-结合浏览器渲染流程" tabindex="-1">4. 结合浏览器渲染流程： <a class="header-anchor" href="#_4-结合浏览器渲染流程" aria-label="Permalink to &quot;4. 结合浏览器渲染流程：&quot;">​</a></h4><ul><li><p><strong>渲染时机</strong>：在每一轮事件循环中，浏览器可能（不一定会）在宏任务之间插入渲染流程（样式计算、布局、绘制）。</p></li><li><p><strong>微任务的影响</strong>：微任务在渲染之前执行，如果微任务中频繁修改 DOM，可能导致多次布局计算，影响性能。</p></li><li><p><strong>优化点</strong>：长任务（Long Task）会阻塞渲染，可以通过将任务拆分为多个微任务（如 <code>requestIdleCallback</code>）或使用 <code>Web Worker</code> 优化。</p></li></ul><h4 id="_5-扩展知识-node-js-与浏览器的事件循环差异" tabindex="-1">5. 扩展知识 Node.js 与浏览器的事件循环差异： <a class="header-anchor" href="#_5-扩展知识-node-js-与浏览器的事件循环差异" aria-label="Permalink to &quot;5. 扩展知识 Node.js 与浏览器的事件循环差异：&quot;">​</a></h4><ul><li><p><strong>Node.js 的事件循环阶段</strong>：分为 <code>timers</code>、<code>pending callbacks</code>、<code>idle/prepare</code>、<code>poll</code>、<code>check</code>、<code>close callbacks</code> 多个阶段。</p></li><li><p><strong>宏任务优先级不同</strong>：例如 <code>setImmediate</code> 和 <code>setTimeout</code> 的执行顺序可能因调用时机不同而变化。</p></li><li><p><strong>微任务触发时机</strong>：<code>Node.js</code> 中微任务在每个阶段结束后执行，而浏览器是在每个宏任务结束后执行。</p></li></ul><h4 id="_6-例子" tabindex="-1">6. 例子 <a class="header-anchor" href="#_6-例子" aria-label="Permalink to &quot;6. 例子&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;async1 start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 Promise 放入事件队列 并让出主线程</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;async1 end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   await 后的代码被包装为微任务，加入微任务队列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;async2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">async1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="_7-参考资料-面试必问之-js-事件循环-event-loop-看这一篇足够" tabindex="-1">7. 参考资料 <a href="https://mp.weixin.qq.com/s/wugntKhMZpgr6RtB1AwAmQ" target="_blank" rel="noreferrer">面试必问之 JS 事件循环（Event Loop），看这一篇足够</a> <a class="header-anchor" href="#_7-参考资料-面试必问之-js-事件循环-event-loop-看这一篇足够" aria-label="Permalink to &quot;7. 参考资料 [面试必问之 JS 事件循环（Event Loop），看这一篇足够](https://mp.weixin.qq.com/s/wugntKhMZpgr6RtB1AwAmQ)&quot;">​</a></h4></details>`,3)]))}const c=i(t,[["render",e]]);export{d as __pageData,c as default};
